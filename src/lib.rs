//! # lorri
//! lorri is a wrapper over Nix to abstract project-specific build
//! configuration and patterns in to a declarative configuration.

#![warn(missing_docs)]
// Required to extract the panic message in our self-made panic hook (see panic.rs). This is
// unstable for the moment - check here (on `master`) to see if the feature has been stabilized:
// https://github.com/rust-lang/rust/blob/0f12bad718bb8b1fb2b1b7267a02fffaef6e1e3c/src/libcore/panic.rs#L93
#![feature(panic_info_message)]

#[macro_use]
extern crate structopt;

#[macro_use]
extern crate log;
extern crate env_logger;

extern crate regex;
#[macro_use]
extern crate lazy_static;

extern crate serde;
#[macro_use]
extern crate serde_derive;
extern crate serde_json;

extern crate notify;
extern crate tempfile;
extern crate vec1;

extern crate proptest;

pub mod bash;
pub mod build_loop;
pub mod builder;
pub mod cas;
pub mod changelog;
pub mod cli;
pub mod constants;
pub mod daemon;
pub mod locate_file;
pub mod logging;
pub mod mpsc;
pub mod nix;
pub mod ops;
pub mod osstrlines;
pub mod panic;
pub mod pathreduction;
pub mod project;
pub mod socket;
pub mod thread;
pub mod watch;

use std::path::{Path, PathBuf};

// OUT_DIR and build_rev.rs are generated by cargo, see ../build.rs
include!(concat!(env!("OUT_DIR"), "/build_rev.rs"));

/// A .nix file.
#[derive(Hash, PartialEq, Eq, Clone, Debug, Serialize, Deserialize)]
pub struct NixFile(PathBuf);

impl NixFile {
    /// Underlying `&OsStr`.
    pub fn as_os_str(&self) -> &std::ffi::OsStr {
        self.0.as_os_str()
    }
}

/// Proxy through the `Display` class for `PathBuf`.
impl std::fmt::Display for NixFile {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        self.0.display().fmt(f)
    }
}

impl From<&std::ffi::OsStr> for NixFile {
    fn from(s: &std::ffi::OsStr) -> NixFile {
        NixFile(PathBuf::from(s.to_owned()))
    }
}

impl From<PathBuf> for NixFile {
    fn from(p: PathBuf) -> NixFile {
        NixFile(p)
    }
}

/// A .drv file (generated by `nix-instantiate`).
#[derive(Hash, PartialEq, Eq, Clone, Debug)]
pub struct DrvFile(PathBuf);

impl DrvFile {
    /// Underlying `Path`.
    pub fn as_path(&self) -> &Path {
        self.0.as_ref()
    }
}

impl From<PathBuf> for DrvFile {
    fn from(p: PathBuf) -> DrvFile {
        DrvFile(p)
    }
}
